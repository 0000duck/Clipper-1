<html>
<head>

<script type="text/javascript" src="../../Scripts/jquery.js">
  </script>
<script type="text/javascript" src="../../Scripts/SyntaxHighlighter/scripts/shCore.js">
  </script>
<script type="text/javascript" src="../../Scripts/SyntaxHighlighter/scripts/shBrushDelphi.js">
  </script>
<script type="text/javascript" src="../../Scripts/SyntaxHighlighter/scripts/shBrushCpp.js">
  </script>
<script type="text/javascript" src="../../Scripts/SyntaxHighlighter/scripts/shBrushCSharp.js">
  </script>
<link type="text/css" rel="stylesheet" href="../../Scripts/SyntaxHighlighter/styles/shCoreDefault.css">
<link type="text/css" rel="stylesheet" href="../../Scripts/SyntaxHighlighter/styles/shThemeDefault.css">
<title>Rounding</title>
<link rel="stylesheet" href="../../Styles/default.css" type="text/css">
<script type="text/javascript" src="../../Scripts/bootstrap.js">
  </script>
</head>

<body bgcolor="#FFFFFF">

<!-- THIS FILE HAS BEEN AUTOMATICALLY PROCESSED FROM A SOURCE COPY --> 

<!-- DO NOT EDIT MANUALLY !!! -->

<table class="Banner" cellspacing="0" cellpadding="0" border="1" bordercolorlight="#303080" bordercolordark="#7070B0">
  <tr>
    <td class="Banner" nowrap=""><a href="../_Body.htm" class="Banner"><img src="../../Images/_Home.gif" align="absmiddle">Home</a></td>
    <td class="Banner" nowrap=""><a href="_Body.htm" class="Banner">概观</a></td>
    <td class="Banner" width="100%" align="right"><img src="../../Images/_Project_Logo.gif" align="absmiddle"></td>
  </tr>
</table>
<h1><strong>整数取整</strong></h1>
<blockquote>
  <p> 通过使用多边形坐标的整数类型, Clipper 库已经可以避免会导致严重的几何计算问题的<strong><a href="http://people.mpi-inf.mpg.de/~kettner/pub/nonrobust_cgta_06.pdf">数据稳定性</a></strong>问题. 下面讨论了<strong>整数取整</strong>的问题及其可能的解决方案。<br>
    <br>
    <img src="../../Images/clipper_rounding.png" width="488" height="365" alt="" align="left"> <span class="maroon"><dfn>重要的是要强调在一开始，舍入导致顶点移动一个单位的分数远离他们的'true'的立场. 然而,由此产生的不精确性可以通过适当的缩放非常有效的管理.</dfn></span><br>
    <br>
    <span class="color1"></span>Clipper库 支持扩展到<span id="color">非常高的程度的精度范围</span>在&plusmn;0x3fffffffffffffff接受整数坐标值（？4.6e +18）。<br>
    <br>
    Another complication of using a discrete numbers (as opposed to <a href="http://en.wikipedia.org/wiki/Real_number" target="_blank">real numbers</a>) is that very occasionally tiny <b>self-intersection</b> artefacts arise. In the unscaled image on the left (where one unit equals one pixel), the area of intersection of two polygons has been highlighted in bright green.<br>
    使用离散数（与<span class="color"><a href="https://en.wikipedia.org/wiki/Real_number">实数相</a></span>反）的另一个复杂现象是，偶尔会出现微小的自相交人工制品,在未缩放的图像的左边（一个单位等于一个像素）,在明亮的绿色中突出了两个多边形相交的区域。<br>
  </p>
</blockquote>
<p class="Body" style="clear='both'"> <img src="../../Images/clipper_rounding2.png" width="440" height="316" alt="" align="right"><br>
  <br>
A 30X 'close up' of the lower points of intersection of these same two polygons shows the presence of a tiny self-intersecting artefact. The three 'black dots' highlight the actual points of intersection (with their fractional coordinates displayed). The 'red dots' show where these points of intersection are located once rounding is applied. With a little care you can see that rounding reverses the orientation of these vertices and causes a tiny self-intersecting artefact.</p>
<p class="Body" style="clear='both'">30倍&quot;关闭&quot;的同样的这两个多边形相交下点显示一个小的自相交的假象的存在,三个&quot;黑点&quot;突出了交点的实际点（显示了它们的分数坐标）,'红点'显示这些交点点位于一旦舍入应用。小心一点，你可以看到，舍入逆转这些顶点的方向，使微小的自相交的假象。<br>
  <br>
  Although these tiny self-intersections are uncommon, if it's deemed necessary, they are best removed with <a href="../Units/ClipperLib/Functions/CleanPolygons.htm">CleanPolygons</a>. (Setting Clipper's <a href="../Units/ClipperLib/Classes/Clipper/Properties/StrictlySimple.htm">StrictlySimple</a> property to true would also address this self-intersection but the tiny (sub-unit) polygon 'artefact' with incorrect orientation would still appear in the solution.) <br>
  虽然这些微小的自相交是罕见的，如果它是必要的，他们是最好的去除c<a href="file:///L:/Open%20Source/clipper/Documentation/Docs/Units/ClipperLib/Functions/CleanPolygons.htm">CleanPolgons.设</a>置剪的<a href="file:///L:/Open%20Source/clipper/Documentation/Docs/Units/ClipperLib/Classes/Clipper/Properties/StrictlySimple.htm">strictlysimple</a>属性设置为true，也会解决这个自相交但小（子单位）多边形的假象与不正确的方向仍然会出现在溶液中。）<br>
</p>
<p class="Body" style="clear='both'"> <img src="../../Images/clipper_rounding4.png" width="292" height="224" alt="" align="left"><br>
  <br>
In this final example, the single polygon on the left also has a tiny self-intersection. However, the clipping algorithm sees this vertex (88,50) as simply 'touching' rather than intersecting the right edge of the polygon (though only by a fraction of a unit). Since this intersection won't normally be detected, the clipping solution (eg following a union operation) will still contain this tiny self-intersection. Setting Clipper's <a href="../Units/ClipperLib/Classes/Clipper/Properties/StrictlySimple.htm">StrictlySimple</a> property to true avoids this uncommon problem.</p>
<p class="Body" style="clear='both'">在这个最后的例子中，在左侧的单个多边形也具有一个微小的自相交。然而，裁剪算法认为这顶点（88,50），为简单的&ldquo;感人'，而不是（仅由一个单元的一小部分虽然）交叉的多边形的右边缘。由于这个路口通常不会被检测到，裁剪解决方案（例如下面一个工会操作）仍将包含这个微小的自相交。快船的设置<a href="../Units/ClipperLib/Classes/Clipper/Properties/StrictlySimple.htm">StrictlySimple</a>属性为true避免了这个罕见的问题。<br>
  <br>
</p>
<div style="clear='both'"></div>
<h2 id="Auto-SeeAlso">请查阅</h2>
<p class="Body"><a href="../Units/ClipperLib/Classes/Clipper/Properties/StrictlySimple.htm">Clipper.StrictlySimple(严格简单)</a>, <a href="../Units/ClipperLib/Functions/CleanPolygons.htm">CleanPolygons（清除多边形链表）</a></p>
<p class="Copyright" id="auto"> <br>
  <br>
  Copyright &copy;2010-2014 Angus Johnson&nbsp; - &nbsp; Clipper 6.2.1 &nbsp; - &nbsp; Help file built on 1-November-2014 <br>
  <br>
</p>
</body>
</html>